generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model book_categories {
  bookId     Int
  categoryId Int
  books      books      @relation(fields: [bookId], references: [bookId], onDelete: Cascade, onUpdate: Restrict, map: "fk_book")
  categories categories @relation(fields: [categoryId], references: [categoryId], onDelete: Cascade, onUpdate: Restrict, map: "fk_category")

  @@id([bookId, categoryId])
  @@index([categoryId], map: "fk_category")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model books {
  bookId          Int               @id @default(autoincrement())
  author          String            @db.VarChar(50)
  title           String            @unique(map: "title_2") @db.VarChar(50)
  date            DateTime          @default(dbgenerated("('0000-00-00')")) @db.Date
  created_at      DateTime          @default(now()) @db.Timestamp(0)
  updated_at      DateTime?         @db.Timestamp(0)
  validated_by    Int?
  status          books_status?     @default(pending)
  cover_url       String?           @db.VarChar(255)
  summary         String?           @db.Text
  averageRating   Float?            @default(0) @db.Float
  search_title    String            @db.Text
  ebook_url       String?           @db.VarChar(255)
  book_categories book_categories[]
  book_publishers book_publishers[]
  user            user?             @relation(fields: [validated_by], references: [userId], onDelete: Restrict, onUpdate: Restrict, map: "fk_validated_by")
  collection      collection[]
  comments        comments[]

  @@index([author], map: "author")
  @@index([validated_by], map: "fk_validated_by")
  @@index([title], map: "title")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model categories {
  categoryId      Int               @id @default(autoincrement())
  name            String            @unique(map: "Name") @db.VarChar(50)
  book_categories book_categories[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model collection {
  collectionId Int       @id @default(autoincrement())
  userId       Int
  bookId       Int
  is_read      Boolean?  @default(false)
  commented    Boolean?  @default(false)
  added_at     DateTime? @default(now()) @db.Timestamp(0)
  last_cfi     String?   @db.Text
  books        books     @relation(fields: [bookId], references: [bookId], onDelete: Cascade, map: "fk_collection_book")
  user         user      @relation(fields: [userId], references: [userId], onDelete: Cascade, map: "fk_collection_user")

  @@unique([userId, bookId], map: "unique_user_book")
  @@index([bookId], map: "fk_collection_book")
  @@index([userId], map: "fk_collection_user")
  @@index([added_at], map: "added_at")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model comments {
  commentId  Int       @id @default(autoincrement())
  bookId     Int
  userId     Int
  content    String    @db.Text
  rating     Int?      @db.TinyInt
  created_at DateTime  @default(now()) @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  books      books     @relation(fields: [bookId], references: [bookId], onDelete: Cascade, onUpdate: Restrict, map: "comments_ibfk_1")
  user       user      @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Restrict, map: "comments_ibfk_2")

  @@unique([userId, bookId], map: "unique_user_book_comment")
  @@index([bookId], map: "bookId")
  @@index([userId], map: "userId")
  @@index([created_at], map: "created_at")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model user {
  userId              Int                  @id @default(autoincrement())
  name                String               @unique(map: "name") @db.VarChar(50)
  mail                String               @unique(map: "mail") @db.VarChar(255)
  password            String               @db.VarChar(255)
  avatar              String?              @db.LongText
  aboutMe             String?              @db.LongText
  repForum            Int                  @default(0) @db.TinyInt
  addCom              Int                  @default(0) @db.TinyInt
  addBook             Int                  @default(0) @db.TinyInt
  news                Int                  @default(0) @db.TinyInt
  created_at          DateTime             @default(now()) @db.Timestamp(0)
  updated_at          DateTime?            @db.Timestamp(0)
  status              user_status?         @default(active)
  suspended_until     DateTime?            @db.DateTime(0)
  role                user_role            @default(user)
  books               books[]
  collection          collection[]
  comments            comments[]
  logs                logs[]
  passwordResetTokens passwordResetToken[]
}

model logs {
  logId      Int              @id @default(autoincrement())
  userId     Int
  action     String           @db.VarChar(255)
  targetId   Int?
  targetType logs_targetType?
  created_at DateTime?        @default(now()) @db.Timestamp(0)
  user       user             @relation(fields: [userId], references: [userId], onUpdate: Restrict, map: "logs_ibfk_1")

  @@index([userId], map: "userId")
}

model book_publishers {
  bookId      Int
  publisherId Int
  books       books      @relation(fields: [bookId], references: [bookId], onDelete: Cascade, onUpdate: Restrict, map: "book_publishers_ibfk_1")
  publishers  publishers @relation(fields: [publisherId], references: [publisherId], onDelete: Cascade, onUpdate: Restrict, map: "book_publishers_ibfk_2")

  @@id([bookId, publisherId])
  @@index([publisherId], map: "publisherId")
}

model publishers {
  publisherId     Int               @id @default(autoincrement())
  name            String            @unique(map: "name") @db.VarChar(100)
  book_publishers book_publishers[]
}

model passwordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique(map: "token") @db.VarChar(255)
  userId    Int
  expiresAt DateTime @db.DateTime(0)
  user      user     @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Restrict, map: "fk_password_user")

  @@index([userId], map: "idx_userId")
}

enum logs_targetType {
  user
  book
  comment
  subject
}

enum books_status {
  pending
  validated
  denied
}

enum user_status {
  active
  suspended
  banned
}

enum user_role {
  user
  prenium
  moderator
  admin
}
